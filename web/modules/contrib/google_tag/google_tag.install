<?php

/**
 * @file
 * Provides install, update, and uninstall functions.
 *
 * @author Jim Berry ("solotandem", http://drupal.org/user/240748)
 */

/**
 * Implements hook_requirements().
 */
function google_tag_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    $containers = \Drupal::service('entity_type.manager')->getStorage('google_tag_container')->loadMultiple();
    if (empty($containers)) {
      // Google Tag Manager container ID has not been set.
      $requirements['google_tag'] = array(
        'title' => t('Google Tag Manager'),
        'description' => t('Configure default settings on the <a href=":url1">module settings page</a>. Afterwards, add a container on the <a href=":url2">container management page</a>.', array(':url1' => \Drupal::url('google_tag.settings_form'), ':url2' => \Drupal::url('entity.google_tag_container.collection'))),
        'severity' => REQUIREMENT_WARNING,
        'value' => t('Not configured'),
      );
    }
  }
  if ($phase == 'runtime' || $phase == 'update' || $phase == 'install') {
    $phase == 'install' ? require_once __DIR__ . '/google_tag.module' : '';
    // Adapted from system_requirements().
    $directory = \Drupal::config('google_tag.settings')->get('uri');
    $directory = $directory ?: 'public://google_tag';
    if (!is_dir($directory) || !_google_tag_is_writable($directory) || !_google_tag_is_executable($directory)) {
      __file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    }
    $is_executable = _google_tag_is_executable($directory);
    $is_writable = _google_tag_is_writable($directory);
    $is_directory = is_dir($directory);
    if (!$is_executable || !$is_writable || !$is_directory) {
      // The snippet directory does not exist or is not writable or searchable.

      // If applicable, get the directory path of stream wrapper.
      $wrapper = \Drupal::service('stream_wrapper_manager')->getViaUri($directory);
      if (method_exists($wrapper, 'getDirectoryPath') && ($path = $wrapper->getDirectoryPath())) {
        // getDirectoryPath() is not defined in StreamWrapperInterface; it
        // exists in LocalStream and the local storage replacement classes in
        // google_appengine; s3fs returns an empty string.
        $path .= '/google_tag';
      }
      elseif (!($path = $wrapper->getExternalUrl())) {
        $path = $directory;
      }

      if (!$is_directory) {
        $error = t('The directory %directory does not exist.', array('%directory' => $path));
        $description = t('An automated attempt to create the directory failed, possibly due to a permissions problem. Create the directory and make it writable.');
        $value = t('Does not exist');
      }
      elseif (!$is_writable) {
        $error = t('The directory %directory is not writable.', array('%directory' => $path));
        $description = t('An automated attempt to make the directory writable failed, possibly due to a permissions problem. Make the directory writable.');
        $value = t('Not writable');
      }
      else {
        $error = t('The directory %directory is not searchable.', array('%directory' => $path));
        $description = t('An automated attempt to make the directory searchable failed, possibly due to a permissions problem. Make the directory searchable.');
        $value = t('Not searchable');
      }
      $extra = '';
      if ($phase == 'install') {
        $extra = t('For more information, see INSTALL.txt or the <a href=":handbook_url">online handbook</a>.', array(':handbook_url' => 'https://www.drupal.org/server-permissions'));
        $value = '';
      }
      $description = array(
        '#type' => 'inline_template',
        '#template' => '{{ error }} {{ description }} {{ extra }}',
        '#context' => array(
          'error' => $error,
          'description' => $description,
          'extra' => $extra,
        ),
      );
      $requirements['google_tag_snippet_directory'] = array(
        'title' => t('Google Tag Manager snippet directory'),
        'description' => $description,
        'severity' => REQUIREMENT_ERROR,
        'value' => $value,
      );
    }
  }
  return $requirements;
}

/**
 * Implements hook_install().
 */
function google_tag_install() {
  global $_google_tag_display_message;
  $_google_tag_display_message = TRUE;
  _google_tag_assets_create();
}

/**
 * Implements hook_uninstall().
 */
function google_tag_uninstall() {
  @file_unmanaged_delete_recursive(\Drupal::config('google_tag.settings')->get('uri'));
  \Drupal::service('asset.js.collection_optimizer')->deleteAll();
  _drupal_flush_css_js();
}

/**
 * Convert config item to separate module settings and container config items.
 */
function google_tag_update_8101(&$sandbox) {
  $data = \Drupal::config('google_tag.settings')->get();
  if (!empty($data['_default_container'])) {
    // Config appears to be updated; do nothing.
    return t('Config appears to be updated; no changes made');
  }

  // Create a container configuration item.
  $container_config = \Drupal::service('config.factory')->getEditable('google_tag.container.primary');
  if (!empty($container_config->get())) {
    // Config appears to be updated; do nothing.
    return t('Config appears to be updated; no changes made');
  }

  $keys = array_flip(['uri', 'compact_snippet', 'include_file', 'rebuild_snippets', 'debug_output', '_core']);
  $data = array_diff_key($data, $keys);
  $container_data = ['status' => TRUE, 'id' => 'primary', 'label' => 'Primary', 'weight' => 0] + $data;
  $container_config->setData($container_data)->save();

  // Update the module configuration item.
  $module_config = \Drupal::service('config.factory')->getEditable('google_tag.settings');
  $module_data = $module_config->get();
  unset($keys['_core']);
  $data['container_id'] = '';
  $module_data = array_intersect_key($module_data, $keys);
  $module_data = ['uri' => 'public://google_tag'] + $module_data + ['_default_container' => $data];
  $module_config->setData($module_data)->save();

  return t('Converted config item to separate settings and container config items');
}
